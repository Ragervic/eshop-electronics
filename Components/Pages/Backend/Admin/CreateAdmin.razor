@page "/Admin/Create"
@using TestP.Components.Layout
@layout AdminLayout

@* @attribute [Authorize(Roles = UserRoles.Admin)]  *@

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Encodings.Web
@using System.Text
@using Microsoft.EntityFrameworkCore
@using TestP.Components.Account.Shared
@using TestP.Data
@using TestP.Models 


@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
    @inject IServiceScopeFactory ScopeFactory
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<CreateAdmin> Logger
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar 

<PageTitle>Register User</PageTitle>

<MudText Typo="Typo.h3" Class="mt-4" GutterBottom="true">Create New User Account</MudText>

<MudCard Outlined="true" Class="mud-elevation-2">
    <MudCardContent>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" OnValidSubmit="CreateNewUser" FormName="createNewUser">
            <DataAnnotationsValidator />
            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.Email" For="@(() => Input.Email)" Label="Email"
                                  Placeholder="name@example.com" Required="true" RequiredError="Email is required." />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.Password" For="@(() => Input.Password)" Label="Password"
                                  InputType="InputType.Password" Required="true" RequiredError="Password is required." />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.ConfirmPassword" For="@(() => Input.ConfirmPassword)" Label="Confirm Password"
                                  InputType="InputType.Password" Required="true" RequiredError="Confirmation password is required." />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect @bind-Value="Input.SelectedRole" Label="Assign Role" Required="true" RequiredError="Please select a role.">
                        @foreach (var roleName in _availableRoles)
                        {
                            <MudSelectItem Value="@roleName">@roleName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" FullWidth="true">Create User</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudCardContent>
</MudCard>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private List<string> _availableRoles = new List<string>();

    private InputModel Input { get; set; } = new();

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        using (var scope = ScopeFactory.CreateScope())
        {
            var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
            _availableRoles = await roleManager.Roles.Select(r => r.Name).Where(name => name != null).Cast<string>().ToListAsync();

            if (!_availableRoles.Contains(UserRoles.Admin))
            {
                await roleManager.CreateAsync(new IdentityRole(UserRoles.Admin));
            }
            if (!_availableRoles.Contains(UserRoles.Staff))
            {
                await roleManager.CreateAsync(new IdentityRole(UserRoles.Staff));
            }
            if (!_availableRoles.Contains(UserRoles.Customer))
            {
                await roleManager.CreateAsync(new IdentityRole(UserRoles.Customer));
            }
            _availableRoles = await roleManager.Roles.Select(r => r.Name).Where(name => name != null).Cast<string>().ToListAsync();

        }
    }

    private async Task CreateNewUser()
    {
        var user = CreateApplicationUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            Snackbar.Add($"User creation failed: {Message}", Severity.Error);
            return;
        }

        Logger.LogInformation("Admin created a new account for {Email}.", Input.Email);
        

        // Assign the selected role
        if (!string.IsNullOrEmpty(Input.SelectedRole))
        {
            var roleResult = await UserManager.AddToRoleAsync(user, Input.SelectedRole);
            if (!roleResult.Succeeded)
            {
                Logger.LogError("Failed to add user {Email} to role {Role}: {Errors}", Input.Email, Input.SelectedRole, string.Join(", ", roleResult.Errors.Select(e => e.Description)));
                Snackbar.Add($"User created, but failed to assign role '{Input.SelectedRole}'. Please review logs.", Severity.Warning);
            }
            else
            {
                Snackbar.Add($"User '{Input.Email}' created and assigned to role '{Input.SelectedRole}'.", Severity.Success);
                Input = new InputModel();
                StateHasChanged(); 
            }
        }
        else
        {
            Snackbar.Add("Error: No role selected for the new user.", Severity.Error);
            Logger.LogError("No role selected for new user {Email}.", Input.Email);
        }

         @* Optionally send email confirmation link (if desired for admin-created users) *@
        var userId = await UserManager.GetUserIdAsync(user);
         var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        NavigationManager.NavigateTo("Account/Login");
    }

    private static ApplicationUser CreateApplicationUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "A role must be selected.")]
        [Display(Name = "Role")]
        public string SelectedRole { get; set; } = string.Empty; 
    }
}