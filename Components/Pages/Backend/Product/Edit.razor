@page "/products/edit/{Id:guid}"
@using TestP.Components.Layout
@layout AdminLayout
@rendermode InteractiveServer


@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization

@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using TestP.Models
@using TestP.Data
@using TestP.Services
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ICategoryService CategoryService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment


<PageTitle>Product Management - Edit a Product</PageTitle>

<MudPaper Elevation="2"
    Style="background-color:	#c9dcff; padding: 16px; margin-bottom: 16px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);  top: 0;z-index: 1000;">
    <MudText Typo="Typo.h4" Class="mb-8 mt-4 text-bold" GutterBottom="true" Color="Color.Primary">Edit Product
    </MudText>
</MudPaper>
@if (product == null)
{
    <MudText Typo="Typo.h5" Align="Align.Center">Loading product details...</MudText>
    <MudProgressLinear Indeterminate="true" Class="my-4" />
}
else
{

    <MudPaper Class="pa-4">
        <MudCard>
            <MudForm Model="@product" @ref="form" enablevalidation="true">
                <MudTextField @bind-Value="product.Name" Label="Product Name" Required="true"
                    RequiredError="Product Name is required!" />
                <MudTextField @bind-Value="product.Brand" Label="Product Brand" Required="true"
                    RequiredError="Product Brand is required!" />
                <MudTextField @bind-Value="product.Description" Label="Description" Lines="3" />
                <MudTextField @bind-Value="product.Price" Label="Product Price" Required="true"
                    RequiredError="Product Price is required!" Adornment="Adornment.Start" AdornmentText="KES"
                    For="@(() => product.Price)" />
                <MudNumericField @bind-Value="product.StockQuantity" Label="Stock" Required="true" Min="0" Max="10000"
                    HideSpinButtons="false" RequiredError="Stock is required!" Step="1"
                    For="@(() => product.StockQuantity)" />

                @if (Categories == null)
                {
                    <MudProgressLinear Indeterminate="true" Class="my-4" />
                    <MudText>Loading categories...</MudText>
                }
                else if (!Categories.Any())
                {
                    <MudAlert Severity="Severity.Warning">No categories found. Please add categories first.</MudAlert>
                }
                else
                {
                    <MudSelect T="int" Label="Product Category" @bind-Value="product.CategoryId" Required="true"
                        RequiredError="Product Category is required!" Variant="Variant.Text" Clearable="true"
                        Placeholder="Select a category" For="@(() => product.CategoryId)">
                        @foreach (var category in Categories)
                        {
                            <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                        }
                    </MudSelect>
                }

                <MudText Typo="Typo.h6" Class="mt-4 mb-2">Product Image</MudText>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <InputFile OnChange="HandleFileSelection" id="fileInput" hidden />
                    <MudButton HtmlTag="label" For="fileInput" Variant="Variant.Filled" Color="Color.Secondary"
                        StartIcon="@Icons.Material.Filled.CloudUpload">
                        Browse File
                    </MudButton>
                    @if (_selectedFileName != null)
                    {
                        <MudText>@_selectedFileName</MudText>
                    }
                </MudStack>

                @if (_uploadedImageUrl != null)
                {
                    <MudImage Src="@_uploadedImageUrl" Alt="Product Preview" Width="200" Class="mt-3 rounded-lg"
                        Style="object-fit: contain;" />
                }
                else if (!string.IsNullOrEmpty(product.ImageUrl) && product.ImageUrl != "images/placeholder.png")
                {
                    <MudImage Src="@product.ImageUrl" Alt="Current Image" Width="200" Class="mt-3 rounded-lg"
                        Style="object-fit: contain;" />
                }
                else
                {
                    <MudImage Src="images/placeholder.png" Alt="No Image" Width="200"
                        Class="mt-3 rounded-lg mud-border-grey-lighten2" Style="object-fit: contain;" />
                }

                @if (_isUploading)
                {
                    <MudProgressLinear Indeterminate="true" Class="my-3" />
                    <MudText Typo="Typo.caption" Color="Color.Primary">Uploading image...</MudText>
                }
                <MudText Typo="Typo.caption" Color="Color.Error">
                    @if (string.IsNullOrEmpty(product.ImageUrl) || product.ImageUrl == "images/placeholder.png")
                    {
                        <span>Product image is required!</span>
                    }
                </MudText>

                <div class="d-flex justify-content-end mt-6">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-2"
                        OnClick="EditProduct">
                        Save Changes
                    </MudButton>
                    <MudButton Variant="Variant.Text" OnClick="GoBack">
                        Cancel
                    </MudButton>
                </div>
            </MudForm>
        </MudCard>
    </MudPaper>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    private Product? product;
    private MudForm? form;
    private List<Category>? Categories;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Categories = await CategoryService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading categories: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error loading categories: {ex.Message}");
            Categories = new List<Category>();
        }

    }
    protected override async Task OnParametersSetAsync()
    {
        if (product == null || product.Id != Guid.Parse(Id.ToString()))
        {
            using var dbContext = DbFactory.CreateDbContext();
            product = await dbContext.Products.FindAsync(Id);

            if (product == null)
            {
                Snackbar.Add($"Product with ID {Id} not found.", Severity.Error);
                NavigationManager.NavigateTo("/products", forceLoad: true);
            }
        }
    }


    private async Task EditProduct()
    {

        if (form == null) return;
        await form.Validate();

        if (form.IsValid)
        {
            using var dbContext = DbFactory.CreateDbContext(); //Handles dependency injection
            try
            {
                dbContext.Entry(product!).State = EntityState.Modified;
                await dbContext.SaveChangesAsync();
                Snackbar.Add("Product updated successfully!", Severity.Success);
                NavigationManager.NavigateTo("/products", forceLoad: true);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error updating product: {ex.Message}", Severity.Error);
                Console.WriteLine($"Error updating product: {ex.Message}");
            }
        }
        else
        {
            Snackbar.Add("Please correct the form errors.", Severity.Warning);
        }
    }
    private IBrowserFile? _selectedFile;
    private string? _selectedFileName;
    private string? _uploadedImageUrl;
    private bool _isUploading = false;
    private const long MAX_FILE_SIZE = 5 * 1024 * 1024;

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        _selectedFile = e.File;
        _selectedFileName = _selectedFile?.Name;
        _uploadedImageUrl = null;

        if (_selectedFile == null)
        {
            Snackbar.Add("No file selected.", Severity.Warning);
            product!.ImageUrl = "images/placeholder.png";
            return;
        }

        if (_selectedFile.Size > MAX_FILE_SIZE)
        {
            Snackbar.Add($"File size exceeds the limit of {MAX_FILE_SIZE / (1024 * 1024)}MB.", Severity.Error);
            _selectedFile = null;
            _selectedFileName = null;
            product!.ImageUrl = "images/placeholder.png";
            return;
        }

        _isUploading = true;
        StateHasChanged();

        try
        {
            var uploadsPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "products");
            if (!Directory.Exists(uploadsPath))
            {
                Directory.CreateDirectory(uploadsPath);
            }
            var fileExtension = Path.GetExtension(_selectedFile.Name);
            var uniqueFileName = $"{Guid.NewGuid().ToString()}{fileExtension}";
            var fullFilePath = Path.Combine(uploadsPath, uniqueFileName);
            await using (var stream = _selectedFile.OpenReadStream(MAX_FILE_SIZE))
            {
                await using (var fileStream = File.Create(fullFilePath))
                {
                    await stream.CopyToAsync(fileStream);
                }
            }
            product!.ImageUrl = Path.Combine("images", "products", uniqueFileName).Replace("\\", "/");
            _uploadedImageUrl = product.ImageUrl;
            Snackbar.Add($"Image '{_selectedFile.Name}' uploaded successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred during image upload: {ex.Message}", Severity.Error);
            Console.WriteLine($"File upload error: {ex.Message}");
            product!.ImageUrl = "images/placeholder.png";
            _uploadedImageUrl = null;
        }
        finally
        {
            _isUploading = false;
            _selectedFile = null;
            StateHasChanged();
        }
    }
    private void GoBack()
    {
        NavigationManager.NavigateTo("/products");
    }
}