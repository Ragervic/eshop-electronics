@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager NavigationManager
@using TestP.Models
@using TestP.Services
@inject ISiteSettingsService SiteSettingsService

<MudThemeProvider @rendermode="InteractiveServer" />
<MudPopoverProvider @rendermode="InteractiveServer" />
<MudDialogProvider @rendermode="InteractiveServer" />
<MudSnackbarProvider @rendermode="InteractiveServer" />

<MudLayout Class="ps-4">
    <MudAppBar Elevation="1" Dense="false" Fixed="true" Color="Color.Dark">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"
            OnClick="() => _drawerOpen = !_drawerOpen" Edge="Edge.Start" />
        <a href="/admin-dashboard">
            <MudText Typo="Typo.h5" Class="ml-3" Color="Color.Info">@_siteConfig?.WebsiteBanner Admin</MudText>
        </a>
        <MudSpacer />
        <MudStack AlignItems="AlignItems.Center" Spacing="2" Row="true">
            <MudNavLink Href="Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">
                Admin Profile</MudNavLink>
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="/" />
                <button type="submit" class="mud-nav-link mud-ripple">
                    <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon>
                    Logout
                </button>
            </form>
        </MudStack>
    </MudAppBar>

    <MudDrawer id="admin-nav-drawer" @bind-Open="_drawerOpen" Color="Color.Dark" ClipMode="DrawerClipMode.Docked"
        Elevation="2" Style="d-none;">
        <NavMenu />
    </MudDrawer>

    <MudMainContent Class="pt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">ðŸ—™</span>
</div>

@code {
    private bool _drawerOpen = true;
    private string? currentUrl;
    private SiteConfiguration? _siteConfig;

    protected override async Task OnInitializedAsync()
    {
        _siteConfig = await SiteSettingsService.GetSiteSettingsAsync();
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}